/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.*;
import static java.util.concurrent.TimeUnit.SECONDS;
import java.net.*;

import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import javax.swing.JOptionPane;
/**
 *
 * @author Bill
 */
public class PrivateChat extends javax.swing.JFrame {
    String chat;
    long chatUpdateTime;
    long onlineTime;
    String userName = Core.getUser();
    /**
     * Creates new form PrivateChat
     */
    public PrivateChat() {
        initComponents();
        
        usernameTextField.setText(userName);
        
        
        
    }
    
    ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(2);
        final Runnable refreshChat = new Runnable() {

            @Override
            public void run() {
                
                chatUpdateTime = System.currentTimeMillis()/1000 - 10;  
                try{
                    
                    
                    
                    String query = "SELECT `user`, `chat`, `time` from `privateChatRoom1` WHERE `time`>" + chatUpdateTime + ";";
                    Main.rs = Main.st.executeQuery(query);
                    //while the result set is still not empty
                    while (Main.rs.next()) {
                        
                        
                        String user = Main.rs.getString("user");
                        String text = Main.rs.getString("chat");
                        int time = Main.rs.getInt("time");
                        
                        String chat = user + ":" + text + "(" + Core.formatTime(time) + ")\n";
                            
                            chatTextArea.append(chat);
                        }
                    
                    //scroll to bottom of text area
                    chatTextArea.setCaretPosition(chatTextArea.getDocument().getLength());
                    
                    
                    //set the signoff value back to zero
                    String query5 = "UPDATE `users` SET `signoff`=0 WHERE `signoff`=1;"; 
                    Main.st.executeUpdate(query5);
                    
                      
            
                    


                } catch (Exception e) {
                    e.printStackTrace();
                }


            }
        };
        final Runnable refreshOnline = new Runnable() {

            @Override
            public void run() {
                
                try{
                    
                    onlineTime = System.currentTimeMillis()/1000 - 30;
                    
                    String query2 = "UPDATE `users` SET `online`=0,`signoff`=1 WHERE `time`<" + onlineTime + " AND `online`=1;"; 
                    Main.st.executeUpdate(query2);
                    
                    
                    
                    String query6 = "SELECT `username` FROM `users` where `online`=0;";
                    Main.rs = Main.st.executeQuery(query6);
                    while (Main.rs.next()) {
                        String userKick = Main.rs.getString("username");
                        if(userName.equals(userKick)){
                            new Login().setVisible(true);
                            PrivateChat.this.dispose();
                        }
                     }


                } catch (Exception e) {
                }


            }
        };
        //the scheduled task runs every 10 seconds
        final ScheduledFuture autoRefreshChat = scheduler.scheduleAtFixedRate(refreshChat, 10, 10, SECONDS);
        final ScheduledFuture autoRefreshOnline = scheduler.scheduleAtFixedRate(refreshOnline, 600, 10, SECONDS);
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        chatTextArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputTextArea = new javax.swing.JTextArea();
        SendMSGButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        chatTextArea.setColumns(20);
        chatTextArea.setRows(5);
        jScrollPane1.setViewportView(chatTextArea);

        inputTextArea.setColumns(20);
        inputTextArea.setRows(5);
        jScrollPane2.setViewportView(inputTextArea);

        SendMSGButton.setText("Chat");
        SendMSGButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendMSGButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Username:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(SendMSGButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SendMSGButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void SendMSGButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendMSGButtonActionPerformed
        chat = inputTextArea.getText();
        try{
            
                String query = "UPDATE `users` SET `time`=" + System.currentTimeMillis()/1000 + " WHERE `username` = '" + userName + "';";
                Main.st.executeUpdate(query);
                String query2 = "INSERT INTO `privateChatRoom1` (`user`, `chat`, `time`) VALUES ('" + userName + "', '" + chat + "', "+ System.currentTimeMillis()/1000+");";
                
                //this doesn't require a result set
                Main.st.executeUpdate(query2);
                
                
            
                    
                    inputTextArea.setText("");     
                    
                    
                }
                catch(Exception e){
                    JOptionPane.showMessageDialog(this, e);
                }
       inputTextArea.setText("");
    }//GEN-LAST:event_SendMSGButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrivateChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrivateChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrivateChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrivateChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run(){
                new PrivateChat().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SendMSGButton;
    private javax.swing.JTextArea chatTextArea;
    private javax.swing.JTextArea inputTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
